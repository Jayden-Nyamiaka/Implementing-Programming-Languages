;; Functions to write using arrays and local variables.

;;
;; Helper function: copy an array. 
;; 

(define (array int) copy-array ([arr : (array int)])
  (locals
    [i : int]
    [len : int]
    [result : (array int)])
  (begin
    (set i 0)
    (set len (array-size arr))
    (set result (make-array len 0))
    (while (< i len)
      (begin
        (array-put result i (array-at arr i))
        (set i (+ i 1))))
    result))

;;
;; Helper function: Test if an array is sorted.
;; 

(define bool is-sorted ([arr : (array int)])
  (locals
    [i : int]
    [len : int]
    [result : bool])
  (begin
    (set i 1)
    (set len (array-size arr))
    (set result #t)
    (while (< i len)
      (begin
        (if (< (array-at arr i) (array-at arr (- i 1)))
            (set result #f)
            #u)
        (set i (+ i 1))))
    result))


;; Sort Helper Function: Int Array Element Swap
(define unit ar-swap ([arr : (array int)] [i : int] [j : int])
  (locals [temp : int])
  (if (!= i j)
    (begin
      (set temp (array-at arr i))
      (array-put arr i (array-at arr j))
      (array-put arr j temp)
    )
    #u
  )
)

;;
;; Function 1: Minimum element sort.
;;

(define unit mesort ([arr : (array int)])
  (locals 
    [len : int]
    [i : int]
    [j : int]
    [minVal : int]
    [minIdx : int]
    )
  (begin
    (set len (array-size arr))
    (set i 0)
    (while (< i (- len 1))
      (begin
        (set j (+ i 1))
        (set minIdx i)
        (set minVal (array-at arr i))
        (while (< j len)
          (begin 
            (if (< (array-at arr j) minVal)
                (begin
                  (set minIdx j)
                  (set minVal (array-at arr j))
                )
                #u
            )
            (set j (+ j 1))
          )
        )
        (ar-swap arr i minIdx)
        (set i (+ i 1))
      )
    )
    #u
  )
)

;;
;; Function 2: Bubble sort.
;;

(define unit bsort ([arr : (array int)])
  (locals 
    [len : int]
    [i : int]
    [j : int]
    [haveSwapped : bool]
    )
  (begin
    (set len (array-size arr))
    (set i 0)
    (set haveSwapped #t)
    (while (if (< i len) haveSwapped #f)
      (begin
        (set j 1)
        (set haveSwapped #f)
        (while (< j (- len i))
          (begin
            (if (< (array-at arr j) (array-at arr (- j 1)))
              (begin
                (ar-swap arr j (- j 1))
                (set haveSwapped #t)
              )
              #u
            )
            (set j (+ j 1))
          )
        )
        (set i (+ i 1))
      )
    )
    #u
  )
)

;; ---------------------------------------------------------------------- 
;; Tests.
;; ---------------------------------------------------------------------- 

(val arr0 (make-array 0 0))

(val arr0-to-test-1 (copy-array arr0))
(check-type (mesort arr0-to-test-1) unit)
(mesort arr0-to-test-1)
(check-expect (= arr0-to-test-1 arr0) #t)

(val arr0-to-test-2 (copy-array arr0))
(check-type (bsort arr0-to-test-2) unit)
(bsort arr0-to-test-2)
(check-expect (= arr0-to-test-2 arr0) #t)

(val arr1 (make-array 10 0))
(array-put arr1 0 42)
(array-put arr1 1 -10)
(array-put arr1 2 1)
(array-put arr1 3 4)
(array-put arr1 4 0)
(array-put arr1 5 42)
(array-put arr1 6 55)
(array-put arr1 7 101)
(array-put arr1 8 9)
(array-put arr1 9 43)

(val arr1-sorted (make-array 10 0))
(array-put arr1-sorted 0 -10)
(array-put arr1-sorted 1 0)
(array-put arr1-sorted 2 1)
(array-put arr1-sorted 3 4)
(array-put arr1-sorted 4 9)
(array-put arr1-sorted 5 42)
(array-put arr1-sorted 6 42)
(array-put arr1-sorted 7 43)
(array-put arr1-sorted 8 55)
(array-put arr1-sorted 9 101)

(val arr1-to-test-1 (copy-array arr1))
(mesort arr1-to-test-1)
(check-expect (= arr1-to-test-1 arr1-sorted) #t)

(val arr1-to-test-2 (copy-array arr1))
(bsort arr1-to-test-2)
(check-expect (= arr1-to-test-2 arr1-sorted) #t)

